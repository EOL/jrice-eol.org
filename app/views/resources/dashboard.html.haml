%h1 Publishing Dashboard
%p= "#{TraitBank.query(%{MATCH (n) RETURN count(n) as count})["data"][0][0]} nodes in the graph."
%p= "#{TraitBank.query(%{MATCH (n:MetaData) RETURN count(n) as count})["data"][0][0]} MetaData nodes."
%p= "#{TraitBank.query(%{MATCH ()-[r]->() RETURN count(r) as count})["data"][0][0]} edges."

%a{ name: 'errors' }
%h2 Recent Errors (Main Log)
%pre= `tail -n 100 log/#{Rails.env}.log | grep -A 18 " error="`

%h2 Delayed Job Log
%p Only the last 20 lines are shown.
.ui.section
  .ui.list
    - @delayed_job_log.each do |log|
      .item= log.sub(/-- : \d\d\d\d-[^\]]+\] /, '').sub(/^[A-Z], /, '')

%a{ name: 'publishing' }
%h2 Publishing Logs
- if @import_logs.size.positive?
  .ui.section
    .ui.list
      - @import_logs.each do |log|
        .item= "#{log.resource.name} (Created #{log.created_at})"
- else
  %p There are no current publishing logs: they are all complete or failed.

%a{ name: 'git' }
%h2 Git Logs
.ui.section
  .ui.list
    - @git_log.each do |log|
      .item= log

%a{ name: 'uptime' }
%h2= "Uptime: #{@uptime}"

%a{ name: 'cpu' }
%h2 Most CPU-intensive processes:
.ui.section
  .ui.list
    - @top_cpu.each do |log|
      - parts = log.split(/\s+/, 11)
      .item= "#{parts[2]}% -> #{parts[-1]} (#{parts[0]}) "

%a{ name: 'jobs' }
%h2 Delayed Job queue:
%p= "Currently #{@queue_count} items in the queue."
- if @queue.any?
  .ui.section
    .ui.list
      - @queue.each do |job|
        - begin
          - payload = job.payload_object.object
          .item
            = "#{job.queue}/#{job.id}: #{payload.class.name}"
            - if payload.is_a? UserDownload
              = link_to('query', payload.search_url)
              = "(#{payload.count} rows) for"
              - if payload&.user
                = link_to(payload.user.username, user_path(payload.user))
            - if job.locked_at
              = "(locked #{job.locked_at})"
            - if job.locked_by
              = "(locked by #{job.locked_by})"
            - if job.failed_at
              = "(failed #{job.failed_at})"
        - rescue => e
          = "Error parsing job: #{e.message}"

%a{ name: 'site' }
- begin
  %h2 Who's hitting the site?
  - results = `cat log/unicorn.stderr.log | awk '{print $1;}' | sort | uniq -c | sort -n | tail -n 3`.split("\n").reverse
  %ul
    - results.each do |result|
      - (times, ip) = result.split
      - ip.sub!(/,\s*$/, '')
      %li= "<strong><a href='https://whatismyipaddress.com/ip/#{ip}'>#{ip}</a></strong> (#{times} times)".html_safe
- rescue => e
  %p Unable to get list of IPs hitting the site:
  %p= e.message

- begin
  %h2 What pages are most popular now?
  - results = `cat log/unicorn.stderr.log | sed 's/^.*GET//' | grep -v "POST " | awk '{print $1;}' | grep -v "^Error" | grep -v "usr/local/bundle" | grep -v "I," | sort | uniq -c | sort -n | tail -n 30`.split("\n").reverse
  %ul
    - results.each do |result|
      - (times, page) = result.split
      - next if page =~ /:in/
      - next if page =~ /ping\./
      %li= "<strong>#{page}</strong> (#{times} times)".html_safe
- rescue => e
  %p Unable to get list of popular pages:
  %p= e.message

%a{ name: 'slow' }
%h2 Recent (very) Slow neo4j Queries (if any)
%pre= `tail -n 250 log/traitbank.log | grep -A6 "<[0-9][0-9]\."`
