.js-content
  .ui.menu.uk-text-small.js-menus.page-filters
    - if @selected_predicate || @predicates.length > 1
      = render "filter_menu", selection: @selected_predicate, items: @predicates,
        to_name: lambda { |g| g.name },
        to_path: lambda { |g| page_data_path(page_id: @page.id, predicate_id: g&.id, resource_id: @selected_resource&.id) },
        no_selection_label: t("filters.filter_by_attribute"),
        show_all_item: nil
    - if @selected_resource || @resources.length > 1
      = render "filter_menu", selection: @selected_resource, items: @resources,
        to_name: lambda { |resource| resource.name },
        to_path: lambda { |resource| page_data_path(page_id: @page.id, resource_id: resource&.id, predicate_id: @selected_predicate&.id) },
        no_selection_label: t("filters.filter_by_provider"),
        show_all_item: nil

  .l-below-filters
    - if @show_wordcloud
      = render "shared/wordcloud", words: @wordcloud_words, class_name: "trait-wordcloud", tooltip: t(".habitat_wordcloud_tooltip")
    - if @show_trophic_web
      = render "trophic_web", data: @trophic_web_data, translations: @trophic_web_translations
    %ul.traits
      - @selected_predicates.each do |p|
        - name = p.name
        - group_data = @grouped_data[p]
        - if group_data
          - traits = group_data.traits
          - trait_count_for_group = group_data.count
          - if !@filtered_by_predicate
            .data-section-head
              %div
              %h3= name
              .data-section-head-more
                - if @selected_predicate.nil? && trait_count_for_group.present? && @traits_per_group < trait_count_for_group
                  = link_to(t(".n_hidden_show_all_noname", count: trait_count_for_group - @traits_per_group), page_data_path(page_id: @page.id, predicate_id: p.id))
          - traits.each do |trait|
            = render :partial => "traits/data_row", :locals => { :page => @page, :trait => trait, :show_taxon => false, :hide_pred_when_closed => true, :page_is_assoc_obj => p.inverse_only? }

